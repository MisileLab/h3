# AUTOGENERATED FROM 'queries/insert.edgeql' WITH:
#     $ gel-py --dir queries/


from __future__ import annotations
import dataclasses
import gel
import uuid


class NoPydanticValidation:
    @classmethod
    def __get_pydantic_core_schema__(cls, _source_type, _handler):
        # Pydantic 2.x
        from pydantic_core.core_schema import any_schema
        return any_schema()

    @classmethod
    def __get_validators__(cls):
        # Pydantic 1.x
        from pydantic.dataclasses import dataclass as pydantic_dataclass
        _ = pydantic_dataclass(cls)
        cls.__pydantic_model__.__get_validators__ = lambda: []
        return []


@dataclasses.dataclass
class InsertResult(NoPydanticValidation):
    id: uuid.UUID


async def insert(
    executor: gel.AsyncIOExecutor,
    *,
    author_name: str,
    content: str,
    is_bot: bool,
) -> InsertResult | None:
    return await executor.query_single(
        """\
        insert Data {
          author_name := <str>$author_name,
          content := <str>$content,
          is_bot := <bool>$is_bot
        } unless conflict on (.author_name, .content) else (
          update Data filter .author_name = <str>$author_name and .content = <str>$content set {
            is_bot := <bool>$is_bot
          }
        )\
        """,
        author_name=author_name,
        content=content,
        is_bot=is_bot,
    )
