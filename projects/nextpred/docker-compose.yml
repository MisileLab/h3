version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:18-alpine
    container_name: nextpred-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: nextpred
      POSTGRES_USER: nextpred
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-nextpred_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./server/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - nextpred-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U nextpred -d nextpred"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Qdrant Vector Database
  qdrant:
    image: qdrant/qdrant:v1.15.5
    container_name: nextpred-qdrant
    restart: unless-stopped
    environment:
      QDRANT__SERVICE__HTTP_PORT: 6333
      QDRANT__SERVICE__GRPC_PORT: 6334
    volumes:
      - qdrant_data:/qdrant/storage
    ports:
      - "6333:6333"
      - "6334:6334"
    networks:
      - nextpred-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:6333/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: nextpred-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - nextpred-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # FastAPI Server
  api:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: nextpred-api
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql+asyncpg://nextpred:${POSTGRES_PASSWORD:-nextpred_password}@postgres:5432/nextpred
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/0
      - LOG_LEVEL=INFO
      - MODEL_DIR=/app/models
      - CUDA_VISIBLE_DEVICES=0
    volumes:
      - ./server:/app
      - model_data:/app/models
      - ./logs:/app/logs
    ports:
      - "8000:8000"
    networks:
      - nextpred-network
    depends_on:
      postgres:
        condition: service_healthy
      qdrant:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'

  # Training Service (Cron Job)
  training-cron:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: nextpred-training
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql+asyncpg://nextpred:${POSTGRES_PASSWORD:-nextpred_password}@postgres:5432/nextpred
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/0
      - LOG_LEVEL=INFO
      - MODEL_DIR=/app/models
      - CUDA_VISIBLE_DEVICES=0
      - TRAINING_SCHEDULE=0 2 * * *  # Daily at 2 AM
    volumes:
      - ./server:/app
      - model_data:/app/models
      - ./logs:/app/logs
    networks:
      - nextpred-network
    depends_on:
      postgres:
        condition: service_healthy
      qdrant:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: >
      sh -c "
        echo '0 2 * * * cd /app && python -m training.train_daily' > /etc/crontabs/root &&
        crond -f -l 2
      "
    deploy:
      resources:
        limits:
          memory: 8G
          cpus: '4.0'
        reservations:
          memory: 4G
          cpus: '2.0'

  # Prometheus
  prometheus:
    image: prom/prometheus:v2.55.1
    container_name: nextpred-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - nextpred-network
    depends_on:
      - api

  # Grafana
  grafana:
    image: grafana/grafana:12.2.1
    container_name: nextpred-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    ports:
      - "3000:3000"
    networks:
      - nextpred-network
    depends_on:
      - prometheus

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: nextpred-nginx
    restart: unless-stopped
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./extension:/var/www/extension
    ports:
      - "80:80"
      - "443:443"
    networks:
      - nextpred-network
    depends_on:
      - api
      - grafana

  # Jupyter Lab for Development (Optional)
  jupyter:
    build:
      context: ./jupyter
      dockerfile: Dockerfile
    container_name: nextpred-jupyter
    restart: unless-stopped
    environment:
      - JUPYTER_TOKEN=${JUPYTER_TOKEN:-nextpred}
      - DATABASE_URL=postgresql+asyncpg://nextpred:${POSTGRES_PASSWORD:-nextpred_password}@postgres:5432/nextpred
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
    volumes:
      - ./server:/app/server
      - ./notebooks:/app/notebooks
      - model_data:/app/models
    ports:
      - "8888:8888"
    networks:
      - nextpred-network
    depends_on:
      - postgres
      - qdrant
    profiles:
      - dev

volumes:
  postgres_data:
    driver: local
  qdrant_data:
    driver: local
  redis_data:
    driver: local
  model_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  nextpred-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16