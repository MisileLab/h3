using UnityEngine;
using UnityEngine.UI;
using System.Collections;

namespace Scalar
{
    /// <summary>
    /// Test script specifically for demonstrating incremental graph generation
    /// </summary>
    public class IncrementalGenerationTest : MonoBehaviour
    {
        [Header("UI References")]
        [SerializeField] private Text statusText;
        [SerializeField] private Text progressText;
        [SerializeField] private Slider progressSlider;
        [SerializeField] private Button generateChunkButton;
        [SerializeField] private Button movePartyButton;
        [SerializeField] private Button resetButton;
        
        [Header("Test Settings")]
        [SerializeField] private float updateInterval = 0.5f;
        [SerializeField] private bool autoGenerate = false;
        [SerializeField] private float autoGenerateDelay = 2.0f;
        
        private GraphSystem graphSystem;
        private GraphVisualizer graphVisualizer;
        private CameraZoomSystem cameraZoomSystem;
        private Coroutine autoGenerateCoroutine;
        
        void Start()
        {
            // Find required components
            graphSystem = FindFirstObjectByType<GraphSystem>();
            graphVisualizer = FindFirstObjectByType<GraphVisualizer>();
            cameraZoomSystem = FindFirstObjectByType<CameraZoomSystem>();
            
            if (graphSystem == null)
            {
                Debug.LogError("IncrementalGenerationTest: No GraphSystem found in scene!");
                return;
            }
            
            // Setup UI
            SetupUI();
            
            // Start status updates
            StartCoroutine(UpdateStatus());
            
            // Start auto-generation if enabled
            if (autoGenerate)
            {
                StartAutoGeneration();
            }
            
            Debug.Log("IncrementalGenerationTest: Test system initialized for incremental generation testing");
        }
        
        /// <summary>
        /// Setup the UI elements
        /// </summary>
        private void SetupUI()
        {
            if (generateChunkButton != null)
            {
                generateChunkButton.onClick.AddListener(GenerateNextChunk);
            }
            
            if (movePartyButton != null)
            {
                movePartyButton.onClick.AddListener(MovePartyForward);
            }
            
            if (resetButton != null)
            {
                resetButton.onClick.AddListener(ResetTest);
            }
        }
        
        /// <summary>
        /// Update status information
        /// </summary>
        private IEnumerator UpdateStatus()
        {
            while (true)
            {
                UpdateStatusDisplay();
                yield return new WaitForSeconds(updateInterval);
            }
        }
        
        /// <summary>
        /// Update the status display
        /// </summary>
        private void UpdateStatusDisplay()
        {
            if (graphSystem == null) return;
            
            // Update status text
            if (statusText != null)
            {
                string status = $"Graph Status:\n";
                status += $"Total Nodes: {graphSystem.GetTotalNodeCount()}\n";
                status += $"Completed: {graphSystem.GetCompletedNodeCount()}\n";
                status += $"Current Depth: {graphSystem.GetCurrentDepth()}\n";
                status += $"Graph Generated: {graphSystem.IsGraphGenerated()}\n";
                
                // Add incremental generation info
                status += $"Incremental Generation: {graphSystem.GetLastGeneratedDepth()}/{graphSystem.GetMaxGeneratedDepth()}\n";
                status += $"Generated Chunks: {(graphSystem.GetLastGeneratedDepth() / graphSystem.GetChunkSize())}\n";
                status += $"Chunk Size: {graphSystem.GetChunkSize()}\n";
                
                statusText.text = status;
            }
            
            // Update progress bar
            if (progressSlider != null)
            {
                float progress = (float)graphSystem.GetLastGeneratedDepth() / graphSystem.GetMaxGeneratedDepth();
                progressSlider.value = progress;
            }
            
            // Update progress text
            if (progressText != null)
            {
                float progress = (float)graphSystem.GetLastGeneratedDepth() / graphSystem.GetMaxGeneratedDepth() * 100f;
                progressText.text = $"Progress: {progress:F1}%";
            }
        }
        
        /// <summary>
        /// Generate the next chunk manually
        /// </summary>
        public void GenerateNextChunk()
        {
            if (graphSystem == null) return;

            graphSystem.GenerateNextChunk();
            Debug.Log("Manually generated next chunk.");
        }
        
        /// <summary>
        /// Move the main party forward to trigger automatic generation
        /// </summary>
        public void MovePartyForward()
        {
            if (graphSystem == null) return;
            
            var mainParty = graphSystem.GetParty("party_main");
            if (mainParty == null) return;
            
            // Move party to the right (deeper into the graph)
            Vector2Int newPosition = mainParty.currentNodePosition + new Vector2Int(1, 0);
            
            if (graphSystem.MoveParty("party_main", newPosition))
            {
                Debug.Log($"Moved party to {newPosition} to trigger generation");
                
                // Update the visualization to show newly discovered nodes
                if (graphVisualizer != null)
                {
                    graphVisualizer.UpdateVisualization();
                }
            }
            else
            {
                Debug.Log("Could not move party - no accessible node in that direction");
            }
        }
        
        /// <summary>
        /// Reset the test by clearing visualization and regenerating
        /// </summary>
        public void ResetTest()
        {
            if (graphVisualizer != null)
            {
                graphVisualizer.ClearVisualization();
            }
            
            // Note: In a real implementation, you'd reset the graph system
            Debug.Log("Test reset - visualization cleared");
        }
        
        /// <summary>
        /// Start automatic chunk generation
        /// </summary>
        public void StartAutoGeneration()
        {
            if (autoGenerateCoroutine != null)
            {
                StopCoroutine(autoGenerateCoroutine);
            }
            
            autoGenerateCoroutine = StartCoroutine(AutoGenerateChunks());
        }
        
        /// <summary>
        /// Stop automatic chunk generation
        /// </summary>
        public void StopAutoGeneration()
        {
            if (autoGenerateCoroutine != null)
            {
                StopCoroutine(autoGenerateCoroutine);
                autoGenerateCoroutine = null;
            }
        }
        
        /// <summary>
        /// Automatically generate chunks at intervals
        /// </summary>
        private IEnumerator AutoGenerateChunks()
        {
            while (true)
            {
                yield return new WaitForSeconds(autoGenerateDelay);
                GenerateNextChunk();
            }
        }
        
        /// <summary>
        /// Toggle auto-generation
        /// </summary>
        public void ToggleAutoGeneration()
        {
            autoGenerate = !autoGenerate;
            
            if (autoGenerate)
            {
                StartAutoGeneration();
            }
            else
            {
                StopAutoGeneration();
            }
        }
        
        /// <summary>
        /// Manually update the graph visualization
        /// </summary>
        public void UpdateVisualization()
        {
            if (graphVisualizer != null)
            {
                graphVisualizer.UpdateVisualization();
                Debug.Log("Manually updated graph visualization");
            }
        }
        
        /// <summary>
        /// Reveal nodes around the current player position
        /// </summary>
        public void RevealNodesAroundPlayer()
        {
            if (graphVisualizer != null)
            {
                graphVisualizer.RevealNodesAroundPlayer("party_main");
                Debug.Log("Revealed nodes around player position");
            }
        }
        
        
        
        /// <summary>
        /// Focus camera on main party
        /// </summary>
        public void FocusOnMainParty()
        {
            var cameraSystem = FindFirstObjectByType<CameraZoomSystem>();
            if (cameraSystem != null)
            {
                cameraSystem.FocusOnMainPartyPublic();
                Debug.Log("IncrementalGenerationTest: Focused camera on main party");
            }
            else
            {
                Debug.LogWarning("IncrementalGenerationTest: No CameraZoomSystem found, cannot focus on main party");
            }
        }
        
        void OnDestroy()
        {
            StopAutoGeneration();
        }
    }
}
