"""Mermaid diagram generation functionality."""

from typing import Dict

from .models import MethodologyStructure


def generate_mermaid_diagram(structure: MethodologyStructure) -> str:
    """
    MethodologyStructure를 Mermaid 플로우차트로 변환합니다.

    Args:
        structure: 분석된 논문 구조

    Returns:
        str: Mermaid 다이어그램 코드
    """
    # 컴포넌트 ID를 레이블로 매핑
    component_labels: Dict[str, str] = {}
    for component in structure.components:
        component_labels[component.id] = f"{component.name}\\n({component.type})"

    # Mermaid 플로우차트 생성
    mermaid_lines = [
        "```mermaid",
        "graph TD",
        "    %% Paper Methodology Diagram",
        f"    %% Title: {structure.title}",
        ""
    ]

    # 컴포넌트 노드 추가
    for component in structure.components:
        # 컴포넌트 타입에 따른 스타일링
        style_class = get_component_style(component.type)
        label = component_labels[component.id]
        mermaid_lines.append(f'    {component.id}["{label}"]')

    mermaid_lines.append("")

    # 연결 관계 추가
    for connection in structure.connections:
        from_label = component_labels.get(connection.from_id, connection.from_id)
        to_label = component_labels.get(connection.to_id, connection.to_id)
        mermaid_lines.append(
            f'    {connection.from_id} -->|"{connection.label}"| {connection.to_id}'
        )

    # 스타일 정의
    mermaid_lines.extend([
        "",
        "    %% Component Styles",
        "    classDef model fill:#e1f5fe,stroke:#01579b,stroke-width:2px",
        "    classDef layer fill:#f3e5f5,stroke:#4a148c,stroke-width:2px",
        "    classDef process fill:#e8f5e8,stroke:#1b5e20,stroke-width:2px",
        "    classDef data fill:#fff3e0,stroke:#e65100,stroke-width:2px",
        ""
    ])

    # 각 컴포넌트에 스타일 적용
    for component in structure.components:
        mermaid_lines.append(f'    class {component.id} {component.type}')

    mermaid_lines.append("```")

    return "\n".join(mermaid_lines)


def generate_comparison_diagram(structure: MethodologyStructure) -> str:
    """
    기존 방법과 비교하는 다이어그램을 생성합니다.

    Args:
        structure: 분석된 논문 구조

    Returns:
        str: 비교 다이어그램 Mermaid 코드
    """
    # 기존 방법과 새로운 방법의 비교
    mermaid_lines = [
        "```mermaid",
        "graph LR",
        "    %% Comparison Diagram",
        f"    %% {structure.title}",
        "",
        "    subgraph Traditional Approach",
        "        T1[Traditional Method]",
        "        T2[Standard Loss]",
        "        T3[Common Architecture]",
        "    end",
        "",
        "    subgraph Proposed Method",
    ]

    # 주요 컴포넌트만 포함
    main_components = structure.components[:3]  # 최대 3개 컴포넌트
    for i, component in enumerate(main_components):
        mermaid_lines.append(f'        P{i+1}[{component.name}]')

    mermaid_lines.extend([
        "    end",
        "",
        "    T1 -.->|Improved by| P1",
        "    T2 -.->|Replaced with| P2",
        "    T3 -.->|Enhanced to| P3",
        "",
        "    classDef traditional fill:#ffcdd2,stroke:#c62828,stroke-width:2px",
        "    classDef proposed fill:#c8e6c9,stroke:#2e7d32,stroke-width:2px",
        "    class T1,T2,T3 traditional",
        "    class P1,P2,P3 proposed",
        "```"
    ])

    return "\n".join(mermaid_lines)


def generate_markdown_report(structure: MethodologyStructure) -> str:
    """
    완전한 마크다운 리포트를 생성합니다.

    Args:
        structure: 분석된 논문 구조

    Returns:
        str: 마크다운 형식의 리포트
    """
    report_lines = [
        f"# {structure.title}",
        "",
        "## Paper Methodology Visualization",
        "",
        f"### Main Contribution",
        f"{structure.main_contribution}",
        "",
        "### Architecture Diagram",
        "",
        generate_mermaid_diagram(structure),
        "",
        "### Key Differences from Existing Methods",
        f"{structure.key_differences}",
        "",
        "### Component Details",
        ""
    ]

    # 컴포넌트 상세 정보
    for component in structure.components:
        report_lines.extend([
            f"#### {component.name}",
            f"- **Type**: {component.type}",
            f"- **Description**: {component.description}",
            ""
        ])

    # 연결 관계 상세 정보
    if structure.connections:
        report_lines.extend([
            "### Data Flow",
            ""
        ])
        for connection in structure.connections:
            report_lines.extend([
                f"- **{connection.from_id}** → **{connection.to_id}**: {connection.label}",
                ""
            ])

    # 비교 다이어그램
    report_lines.extend([
        "### Comparison with Traditional Approach",
        "",
        generate_comparison_diagram(structure),
        "",
        "---",
        "*Generated by Paper Visualizer*"
    ])

    return "\n".join(report_lines)


def get_component_style(component_type: str) -> str:
    """
    컴포넌트 타입에 따른 Mermaid 스타일을 반환합니다.

    Args:
        component_type: 컴포넌트 타입

    Returns:
        str: 스타일 클래스 이름
    """
    style_map = {
        "model": "model",
        "layer": "layer",
        "process": "process",
        "data": "data"
    }
    return style_map.get(component_type, "model")


def validate_mermaid_syntax(mermaid_code: str) -> bool:
    """
    Mermaid 코드의 기본 문법을 검증합니다.

    Args:
        mermaid_code: 검증할 Mermaid 코드

    Returns:
        bool: 유효한 경우 True
    """
    # 기본적인 구문 검증
    required_elements = ["```mermaid", "graph", "```"]
    return all(element in mermaid_code for element in required_elements)