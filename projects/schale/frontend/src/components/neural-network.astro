---
---

<div class="neural-network-container w-full min-h-[300px] sm:h-96 flex flex-col items-center justify-center px-4">
  <!-- Neural Network Visualization -->
  <div class="neural-network mb-4 sm:mb-8">
    <svg width="100%" height="150" viewBox="0 0 600 200" class="neural-svg max-w-[300px] sm:max-w-[500px] lg:max-w-[600px]" preserveAspectRatio="xMidYMid meet">
      <!-- Input Layer -->
      <g class="input-layer">
        <circle cx="50" cy="50" r="15" class="neuron input-neuron" data-layer="input" data-index="0"></circle>
        <circle cx="50" cy="100" r="15" class="neuron input-neuron" data-layer="input" data-index="1"></circle>
        <circle cx="50" cy="150" r="15" class="neuron input-neuron" data-layer="input" data-index="2"></circle>
      </g>
      
      <!-- Hidden Layer 1 -->
      <g class="hidden-layer-1">
        <circle cx="200" cy="40" r="15" class="neuron hidden-neuron" data-layer="hidden1" data-index="0"></circle>
        <circle cx="200" cy="80" r="15" class="neuron hidden-neuron" data-layer="hidden1" data-index="1"></circle>
        <circle cx="200" cy="120" r="15" class="neuron hidden-neuron" data-layer="hidden1" data-index="2"></circle>
        <circle cx="200" cy="160" r="15" class="neuron hidden-neuron" data-layer="hidden1" data-index="3"></circle>
      </g>
      
      <!-- Hidden Layer 2 -->
      <g class="hidden-layer-2">
        <circle cx="350" cy="50" r="15" class="neuron hidden-neuron" data-layer="hidden2" data-index="0"></circle>
        <circle cx="350" cy="100" r="15" class="neuron hidden-neuron" data-layer="hidden2" data-index="1"></circle>
        <circle cx="350" cy="150" r="15" class="neuron hidden-neuron" data-layer="hidden2" data-index="2"></circle>
      </g>
      
      <!-- Output Layer -->
      <g class="output-layer">
        <circle cx="500" cy="75" r="15" class="neuron output-neuron" data-layer="output" data-index="0"></circle>
        <circle cx="500" cy="125" r="15" class="neuron output-neuron" data-layer="output" data-index="1"></circle>
      </g>
      
      <!-- Connections -->
      <g class="connections">
        <!-- Input to Hidden1 connections -->
        <line x1="65" y1="50" x2="185" y2="40" class="connection" data-from="input-0" data-to="hidden1-0"></line>
        <line x1="65" y1="50" x2="185" y2="80" class="connection" data-from="input-0" data-to="hidden1-1"></line>
        <line x1="65" y1="50" x2="185" y2="120" class="connection" data-from="input-0" data-to="hidden1-2"></line>
        <line x1="65" y1="50" x2="185" y2="160" class="connection" data-from="input-0" data-to="hidden1-3"></line>
        
        <line x1="65" y1="100" x2="185" y2="40" class="connection" data-from="input-1" data-to="hidden1-0"></line>
        <line x1="65" y1="100" x2="185" y2="80" class="connection" data-from="input-1" data-to="hidden1-1"></line>
        <line x1="65" y1="100" x2="185" y2="120" class="connection" data-from="input-1" data-to="hidden1-2"></line>
        <line x1="65" y1="100" x2="185" y2="160" class="connection" data-from="input-1" data-to="hidden1-3"></line>
        
        <line x1="65" y1="150" x2="185" y2="40" class="connection" data-from="input-2" data-to="hidden1-0"></line>
        <line x1="65" y1="150" x2="185" y2="80" class="connection" data-from="input-2" data-to="hidden1-1"></line>
        <line x1="65" y1="150" x2="185" y2="120" class="connection" data-from="input-2" data-to="hidden1-2"></line>
        <line x1="65" y1="150" x2="185" y2="160" class="connection" data-from="input-2" data-to="hidden1-3"></line>
        
        <!-- Hidden1 to Hidden2 connections -->
        <line x1="215" y1="40" x2="335" y2="50" class="connection" data-from="hidden1-0" data-to="hidden2-0"></line>
        <line x1="215" y1="40" x2="335" y2="100" class="connection" data-from="hidden1-0" data-to="hidden2-1"></line>
        <line x1="215" y1="40" x2="335" y2="150" class="connection" data-from="hidden1-0" data-to="hidden2-2"></line>
        
        <line x1="215" y1="80" x2="335" y2="50" class="connection" data-from="hidden1-1" data-to="hidden2-0"></line>
        <line x1="215" y1="80" x2="335" y2="100" class="connection" data-from="hidden1-1" data-to="hidden2-1"></line>
        <line x1="215" y1="80" x2="335" y2="150" class="connection" data-from="hidden1-1" data-to="hidden2-2"></line>
        
        <line x1="215" y1="120" x2="335" y2="50" class="connection" data-from="hidden1-2" data-to="hidden2-0"></line>
        <line x1="215" y1="120" x2="335" y2="100" class="connection" data-from="hidden1-2" data-to="hidden2-1"></line>
        <line x1="215" y1="120" x2="335" y2="150" class="connection" data-from="hidden1-2" data-to="hidden2-2"></line>
        
        <line x1="215" y1="160" x2="335" y2="50" class="connection" data-from="hidden1-3" data-to="hidden2-0"></line>
        <line x1="215" y1="160" x2="335" y2="100" class="connection" data-from="hidden1-3" data-to="hidden2-1"></line>
        <line x1="215" y1="160" x2="335" y2="150" class="connection" data-from="hidden1-3" data-to="hidden2-2"></line>
        
        <!-- Hidden2 to Output connections -->
        <line x1="365" y1="50" x2="485" y2="75" class="connection" data-from="hidden2-0" data-to="output-0"></line>
        <line x1="365" y1="50" x2="485" y2="125" class="connection" data-from="hidden2-0" data-to="output-1"></line>
        
        <line x1="365" y1="100" x2="485" y2="75" class="connection" data-from="hidden2-1" data-to="output-0"></line>
        <line x1="365" y1="100" x2="485" y2="125" class="connection" data-from="hidden2-1" data-to="output-1"></line>
        
        <line x1="365" y1="150" x2="485" y2="75" class="connection" data-from="hidden2-2" data-to="output-0"></line>
        <line x1="365" y1="150" x2="485" y2="125" class="connection" data-from="hidden2-2" data-to="output-1"></line>
      </g>
    </svg>
  </div>
  
  <!-- Output Display -->
  <div class="output-display text-center">
    <div class="output-text text-xl sm:text-3xl lg:text-5xl font-bold text-white min-h-8 sm:min-h-16">
      <span id="output-result"></span>
    </div>
  </div>
  
  <!-- Loading indicator -->
  <div id="loading-indicator" class="mt-4 sm:mt-8 text-indigo-300 text-sm sm:text-lg text-center">
    Initializing Neural Network...
  </div>
</div>

<style>
  .neural-network {
    background: rgba(15, 23, 42, 0.8);
    border-radius: 0.5rem;
    padding: 1rem;
    border: 1px solid rgba(99, 102, 241, 0.3);
  }

  @media (min-width: 640px) {
    .neural-network {
      border-radius: 1rem;
      padding: 2rem;
    }
  }

  .neuron {
    fill: rgba(99, 102, 241, 0.5);
    stroke: rgba(99, 102, 241, 0.8);
    stroke-width: 2;
    transition: all 0.3s ease;
  }

  .neuron.active {
    fill: rgba(99, 102, 241, 1);
    stroke: rgba(147, 197, 253, 1);
    filter: drop-shadow(0 0 8px rgba(99, 102, 241, 0.8));
  }

  .connection {
    stroke: rgba(99, 102, 241, 0.3);
    stroke-width: 2;
    transition: all 0.3s ease;
  }

  .connection.active {
    stroke: rgba(99, 102, 241, 1);
    stroke-width: 3;
    filter: drop-shadow(0 0 4px rgba(99, 102, 241, 0.6));
  }

  .neural-network-container {
    perspective: 1000px;
  }

  .output-text {
    font-family: 'Courier New', monospace;
    letter-spacing: 0.1em;
  }

  /* Mobile optimizations */
  @media (max-width: 639px) {
    .neural-network-container {
      min-height: 250px;
    }
    
    .neural-network {
      max-width: calc(100vw - 2rem);
      overflow: hidden;
    }
    
    .output-text {
      line-height: 1.2;
      word-break: break-word;
    }
  }

  /* Ensure good visibility on all screen sizes */
  .neural-svg {
    width: 100%;
    height: auto;
  }
</style>

<script>
  class NeuralNetworkVisualizer {
    neurons: NodeListOf<Element>;
    connections: NodeListOf<Element>;
    outputElement: HTMLElement | null;
    loadingIndicator: HTMLElement | null;
    words: string[];
    currentWordIndex: number;
    onComplete: (() => void) | null;

    constructor(onComplete?: () => void) {
      this.neurons = document.querySelectorAll('.neuron');
      this.connections = document.querySelectorAll('.connection');
      this.outputElement = document.getElementById('output-result');
      this.loadingIndicator = document.getElementById('loading-indicator');
      
      this.words = ['misile', 'project', 'developer', 'python', 'astrojs', 'creator'];
      this.currentWordIndex = 0;
      this.onComplete = onComplete || null;
      
      // Start animation automatically after a short delay
      setTimeout(() => this.startAnimation(), 1500);
    }
    
    async startAnimation() {
      if (this.loadingIndicator) {
        this.loadingIndicator.textContent = 'Processing...';
      }
      if (this.outputElement) {
        this.outputElement.textContent = '';
      }
      
      // Reset all elements
      this.neurons.forEach((neuron: Element) => {
        (neuron as HTMLElement).classList.remove('active');
      });
      this.connections.forEach((conn: Element) => {
        (conn as HTMLElement).classList.remove('active');
      });
      
      // Start forward propagation
      await this.forwardPropagate();
      
      // Hide loading indicator
      if (this.loadingIndicator) {
        this.loadingIndicator.style.display = 'none';
      }
      
      // Wait a moment before calling completion callback
      await this.wait(500);
      
      // Call completion callback if provided
      if (this.onComplete) {
        this.onComplete();
      }
    }
    
    async forwardPropagate() {
      // Activate input layer
      const inputNeurons = document.querySelectorAll('[data-layer="input"]');
      await this.activateNeurons(inputNeurons, 300);
      
      // Propagate to hidden layer 1
      const inputToHidden1 = document.querySelectorAll('[data-to^="hidden1"]');
      await this.activateConnections(inputToHidden1, 200);
      
      const hidden1Neurons = document.querySelectorAll('[data-layer="hidden1"]');
      await this.activateNeurons(hidden1Neurons, 300);
      
      // Propagate to hidden layer 2
      const hidden1ToHidden2 = document.querySelectorAll('[data-to^="hidden2"]');
      await this.activateConnections(hidden1ToHidden2, 200);
      
      const hidden2Neurons = document.querySelectorAll('[data-layer="hidden2"]');
      await this.activateNeurons(hidden2Neurons, 300);
      
      // Propagate to output layer
      const hidden2ToOutput = document.querySelectorAll('[data-to^="output"]');
      await this.activateConnections(hidden2ToOutput, 200);
      
      const outputNeurons = document.querySelectorAll('[data-layer="output"]');
      await this.activateNeurons(outputNeurons, 500);
    }
    
    async activateNeurons(neurons: NodeListOf<Element>, delay: number) {
      return new Promise<void>(resolve => {
        neurons.forEach((neuron: Element, index: number) => {
          setTimeout(() => {
            // 펄스 애니메이션 없이 바로 활성화 상태로 변경
            (neuron as HTMLElement).classList.add('active');
          }, index * 100);
        });
        setTimeout(resolve, delay);
      });
    }
    
    async activateConnections(connections: NodeListOf<Element>, delay: number) {
      return new Promise<void>(resolve => {
        connections.forEach((conn: Element, index: number) => {
          setTimeout(() => {
            (conn as HTMLElement).classList.add('active');
          }, index * 20);
        });
        setTimeout(resolve, delay);
      });
    }
    
    wait(ms: number) {
      return new Promise<void>(resolve => setTimeout(resolve, ms));
    }
  }
  
  // Make the class globally available
  (window as any).NeuralNetworkVisualizer = NeuralNetworkVisualizer;
</script>
