---
import {HoverType, AnimationType} from "./lib"

export interface Props {
  initialTime?: number,
  hover?: HoverType,
  completeTime?: number,
  animationType?: AnimationType,
  id?: string
}
const { initialTime = 1, hover = HoverType.reanimate, completeTime = 0.8, animationType = AnimationType.normal, id = "" } = Astro.props;
---

<astro-animation data-initialTime={initialTime} data-hover={hover} data-completeTime={completeTime} data-animationType={animationType} id={id}><slot /></astro-animation>
<script>
  import { parseFloat, nullVerify } from "@misile/satellite"
  import { normalHide, normalShow, randomHide, randomShow, getLength } from "./lib"
  import { map } from "nanostores"

  class AstroAnimation extends HTMLElement {
    private initialTime: number = 0;
    private hover: string = "";
    private completeTime: number = 0;
    private animationType: string = "";
    animations: Record<number, {show: Record<number, number>, hide: Record<number, number>}> = {};
    private observer_function = map<Record<number, ((x: HTMLElement) => void)>>({});

    constructor() {
      super();
      let tmp = this;
      const observer = new MutationObserver(function(mutations) {
        for (let i=0;i<mutations.length;i++) {
          if (mutations[i].addedNodes.length) {
            mutations[i].addedNodes.forEach(function(_) {
              tmp.connectedCallback();
            });
          }
        }
      });
      observer.observe(this, {childList: true});
    }

    connectedCallback() {
      this.initialTime = parseFloat(nullVerify(this.dataset.initialtime)) * 1000;
      this.hover = nullVerify(this.dataset.hover);
      this.completeTime = parseFloat(nullVerify(this.dataset.completetime)) * 1000;
      this.animationType = nullVerify(this.dataset.animationtype);
      for (let i=0;i<this.childNodes.length;i++) {
        if (this.childNodes.length != 1 && this.childNodes[i].nodeType == Node.TEXT_NODE) {continue;}
        const realv = this.childNodes[i] as HTMLElement;
        const org = realv.innerText;
        const aps = this.completeTime / realv.innerText.length;
        this.animations[i] = {show: [], hide: []};
        if (this.hover == "reanimate") {
          if (this.animationType == "normal" || this.animationType == 'rewind') {
            realv.addEventListener('mouseover', ()=>{
              if (getLength(this.animations[i].show) > 0 || getLength(this.animations[i].hide) > 0) {return;}
              normalHide(realv, i, this.animationType == 'rewind', aps/2, 0, this.animations);
              normalShow(realv, i, org, this.animationType == 'rewind', aps/2, aps*(realv.innerText.length/2), this.animations);
            })
            this.observer_function.setKey(i, () => {
              normalHide(realv, i, this.animationType == 'rewind', aps/2, this.initialTime, this.animations);
              normalShow(realv, i, org, this.animationType == 'rewind', aps/2, this.initialTime+aps*(realv.innerText.length/2), this.animations);
            });
          } else {
            realv.addEventListener('mouseover', ()=>{
              if (getLength(this.animations[i].show) > 0 || getLength(this.animations[i].hide) > 0) {return;}
              randomHide(realv, i, aps/2, 0, this.animations);
              randomShow(realv, i, org, aps/2, aps*(realv.innerText.length/2), this.animations);
            })
            this.observer_function.setKey(i, () => {
              randomHide(realv, i, aps/2, this.initialTime, this.animations);
              randomShow(realv, i, org, aps/2, this.initialTime+aps*(realv.innerText.length/2), this.animations);
            });
          }
        } else if (this.hover == "hide") {
          if (this.animationType == "normal" || this.animationType == 'rewind') {
            realv.addEventListener('mouseover', ()=>{
              if (getLength(this.animations[i].hide) > 0) {return;}
              normalHide(realv, i, this.animationType == 'rewind', aps, 0, this.animations);
            })
            realv.addEventListener('mouseout', ()=>{
              if (getLength(this.animations[i].show) > 0) {return;}
              normalShow(realv, i, org, this.animationType == 'rewind', aps, 0, this.animations);
            })
          } else {
            realv.addEventListener('mouseover', ()=>{
              if (getLength(this.animations[i].hide) > 0) {return;}
              randomHide(realv, i, aps, 0, this.animations);
            })
            realv.addEventListener('mouseout', ()=>{
              if (getLength(this.animations[i].show) > 0) {return;}
              randomShow(realv, i, org, aps, 0, this.animations);
            })
          }
        } else if (this.hover == "show") {
          if (this.animationType == "normal" || this.animationType == 'rewind') {
            realv.addEventListener('mouseover', ()=>{
              if (getLength(this.animations[i].show) > 0) {return;}
              normalShow(realv, i, org, this.animationType == 'rewind', aps, 0, this.animations);
            })
            this.observer_function.setKey(i, () => {
              normalHide(realv, i, this.animationType == 'rewind', aps, this.initialTime, this.animations);
            });
            realv.addEventListener('mouseout', ()=>{
              if (getLength(this.animations[i].hide) > 0) {return;}
              normalHide(realv, i, this.animationType == 'rewind', aps, 0, this.animations);
            })
          } else {
            realv.addEventListener('mouseover', ()=>{
              if (getLength(this.animations[i].show) > 0) {return;}
              randomShow(realv, i, org, aps, 0, this.animations);
            })
            this.observer_function.setKey(i, () => {
              randomHide(realv, i, aps, this.initialTime, this.animations);
            });
            realv.addEventListener('mouseout', ()=>{
              if (getLength(this.animations[i].hide) > 0) {return;}
              randomHide(realv, i, aps, 0, this.animations);
            })
          }
        }
        this.observer_function.get()[i](realv);
      }
    }
  }

  customElements.define('astro-animation', AstroAnimation)
</script>

