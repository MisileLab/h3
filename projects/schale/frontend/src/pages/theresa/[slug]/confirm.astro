---
import Base from "../../../components/base.astro"

import { nullVerify } from "@misile/satellite"
import { nullValue } from "@misile/satellite/errors"
import { statusError } from "../../../components/request"

let slug = Astro.params.slug

try {
  slug = nullVerify(slug)
} catch (e) {
  if (e instanceof nullValue || e instanceof statusError) {
    return new Response("not found", { status: 404 })
  } else {
    throw e
  }
}
---

<Base>
  <Fragment slot="head">
    <title>{slug}</title>
    <script>
      import { nullVerify, queryId } from "@misile/satellite"
      import { atom } from "nanostores"
      import { confirm } from "./lib"

      const params = new URLSearchParams(window.location.search)
      const name = nullVerify(params.get("name"))
      const email = nullVerify(params.get("email"))
      const hash = nullVerify(params.get("hash"))
      const name_signer = atom("")
      const message = atom("")
      const signature = atom("")

      queryId("name").addEventListener("input", (e) => {
        name_signer.set(nullVerify(e.target as HTMLInputElement | undefined).value)
      })

      queryId("message").addEventListener("input", (e) => {
        message.set(nullVerify(e.target as HTMLInputElement | undefined).value)
      })

      queryId("signature").addEventListener("change", (x) => {
        const file = nullVerify((x.target as HTMLInputElement).files)[0]
        const reader = new FileReader()
        reader.onload = (e) => {
          signature.set(nullVerify(e.target).result as string)
        }
        reader.readAsDataURL(file)
      })

      queryId("confirm").addEventListener("click", async () => {
        const name_signer_value = name_signer.get()
        const message_value = message.get()
        const signature_value = signature.get()
        if (name_signer_value === "" || message_value === "") {
          alert("name and message are required")
          return
        }
        await confirm(
          name,
          name_signer_value,
          email,
          hash,
          message_value,
          signature_value
        )
      })
    </script>
  </Fragment>
  <div class="w-full h-full flex flex-row">
    <div class="w-full h-screen justify-center items-center flex flex-col px-2 sm:px-0">
      <div class="flex flex-col gap-y-2">
        <p class="text-indigo-200 text-4xl sm:text-6xl font-bold">sign pointer</p>
        <div class="flex flex-row w-full gap-x-6 font-semibold text-2xl sm:text-4xl">
          <span class="whitespace-nowrap">your name: </span>
          <input title="name" type="text" class="bg-gray-950 font-normal border-b-2 border-solid w-full break-words" id="name" />
        </div>
        <div class="flex flex-row w-full gap-x-6 font-semibold text-2xl sm:text-4xl">
          <span class="whitespace-nowrap">message: </span>
          <input title="message" type="text" class="bg-gray-950 font-normal border-b-2 border-solid w-full break-words" id="message" />
        </div>
        <div class="flex flex-row w-full gap-x-6 font-semibold text-2xl sm:text-4xl">
          <span class="whitespace-nowrap">signature(optional): </span>
          <input type="file" id="signature" multiple={false} accept="image/*" class="bg-gray-950 font-normal border-solid w-full break-words" />
        </div>
        <button class="whitespace-nowrap border-2 border-solid px-2 py-2 text-2xl sm:text-4xl" id="confirm">Confirm</button>
      </div>
    </div>
	</div>
</Base>
