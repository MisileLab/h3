# 게임 엔진과 아들에게 바친 게임

- 게임 엔진 작업을 재개한 후 아들을 위해 게임을 제작함.
- 기존 엔진 대신 직접 코딩을 선택, 개인적인 추억 강조.
- **게임 링크**: [플레이하기](https://youtu.be/nVRzCstyspQ)

## 엔진 및 게임 개발

- C++17로 엔진 개발, Lua로 게임 스크립트 작성.
- 자원들은 지연 로딩 방식을 사용하여 게임 루프에 영향 최소화.
- **게임 소스 코드 및 엔진 소스 코드** 제공.

## 메시지 통신

- 엔티티 간 메시지를 주고받는 기능 구현 (Erlang의 우편 서비스 모델 도입).
- 예: 총알이 문어와 충돌 시 데미지 처리.
- 자원 관리에 주의, 객체 풀 기술로 리소스 재사용.

## 게임 루프 및 사용자 입력 처리

- 매 프레임마다 총알의 위치와 상태를 업데이트.
- 문어의 충돌 시 애니메이션과 행동 변화.
- 플레이어의 키 입력에 따라 움직임 및 발사 기능 구현.

## 최종 결과 및 변경 요청

- 아들은 프로젝트에 작은 변경 사항 요청 (캐릭터 스프라이트 등).
- 개인적인 경험과 창작의 즐거움 강조.

## 댓글 요약

- **게임 개발 조언**: 자신의 흥미를 중시하며, 간단한 그래픽 API에 집중하여 게임 엔진을 만드는 것이 좋음.
- **프로그래머의 관점**: 게임을 만드는 것이 매우 추상적이며, 예술가들이 프로그래밍을 통해 성공적인 인디 개발자가 될 가능성이 높음.
- **콘텐츠 제작의 중요성**: 게임은 콘텐츠로 구성되어 있으며, 아티스트가 게임 제작에 더 나은 관점을 가질 수 있음.
- **기술 습득의 장벽**: 언어 학습처럼, 초보자가 처음 내용에 압도감을 느끼는 것을 이해해야 함.
- **엔진 개발의 개념**: 엔진 개발은 구체적이지만, 좋은 게임 제작은 불확실한 요소가 많음.
- **모티베이션의 중요성**: 사람들은 동기에 따라 자신의 스타일을 바라보아야 하며, 결과물을 만들기 위해 엔진 개발에 집중해야 함.
- **실행 후 피드백**: 게임의 기능을 먼저 결정하고 그것을 기반으로 개발하는 것이 중요하며, 불필요한 엔진 개발은 혼란을 초래할 수 있음.