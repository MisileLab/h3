# AUTOGENERATED FROM 'queries/loan/add_loan.edgeql' WITH:
#     $ edgedb-py --dir queries --no-skip-pydantic-validation


from __future__ import annotations
import dataclasses
import datetime
import edgedb
import uuid


@dataclasses.dataclass
class AddLoanResult:
    id: uuid.UUID


async def add_loan(
    executor: edgedb.AsyncIOExecutor,
    *,
    receiver_id: int,
    bank_name: str,
    product_id: uuid.UUID,
    amount: int,
    date: datetime.datetime,
    fee: int,
) -> AddLoanResult | None:
    return await executor.query_single(
        """\
        with
          receiver := (select User filter .userid = <int64>$receiver_id),
          sender := (select Bank filter .name = <str>$bank_name),
          product := (select Product filter .id = <uuid>$product_id),
          computed_amount := (<int64>$amount + <int64>math::ceil(product.interest / 100 * <int64>$amount)),
          exist_loan := (
            update Loan filter .receiver = receiver.id and .sender = sender.id and .product = product set {
              amount := computed_amount,
            }
          ),
          loan := exist_loan ?? (insert Loan {
            amount := computed_amount,
            receiver := receiver.id,
            sender := sender.id,
            product := product,
            date := <datetime>$date
          }),
          def := exist_loan ?? (update sender set {
            loans += loan
          }).loans,
          def2 := exist_loan ?? (update receiver set {
            loans += loan
          }).loans
        update sender set {
          money := .money - <int64>$amount
        };
        update User filter .userid = <int64>$receiver_id set {
          money := .money + <int64>$amount - <int64>math::ceil(<int64>$amount / 100 * <int64>$fee)
        };\
        """,
        receiver_id=receiver_id,
        bank_name=bank_name,
        product_id=product_id,
        amount=amount,
        date=date,
        fee=fee,
    )
