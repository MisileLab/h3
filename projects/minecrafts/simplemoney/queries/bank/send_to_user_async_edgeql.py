# AUTOGENERATED FROM 'queries/bank/send_to_user.edgeql' WITH:
#     $ edgedb-py


from __future__ import annotations
import dataclasses
import edgedb
import uuid


class NoPydanticValidation:
    @classmethod
    def __get_pydantic_core_schema__(cls, _source_type, _handler):
        # Pydantic 2.x
        from pydantic_core.core_schema import any_schema
        return any_schema()

    @classmethod
    def __get_validators__(cls):
        # Pydantic 1.x
        from pydantic.dataclasses import dataclass as pydantic_dataclass
        _ = pydantic_dataclass(cls)
        cls.__pydantic_model__.__get_validators__ = lambda: []
        return []


@dataclasses.dataclass
class SendToUserResult(NoPydanticValidation):
    id: uuid.UUID


async def send_to_user(
    executor: edgedb.AsyncIOExecutor,
    *,
    receiverid: int,
    sender: uuid.UUID,
    amount: int,
    sender_money: int,
    receiver_money: int,
) -> SendToUserResult | None:
    return await executor.query_single(
        """\
        with
          receiver := (select User filter .userid = <int64>$receiverid),
          sender := (select Bank filter .id = <uuid>$sender),
          data := (insert Data {amount := <int64>$amount, sender := sender.id, receiver := receiver.id}),
          def := (update sender set {transactions += data, money := <int64>$sender_money})
        update receiver set {transactions += data, money := <int64>$receiver_money};\
        """,
        receiverid=receiverid,
        sender=sender,
        amount=amount,
        sender_money=sender_money,
        receiver_money=receiver_money,
    )
