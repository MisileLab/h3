# AUTOGENERATED FROM 'queries/bank/modify_bank.edgeql' WITH:
#     $ edgedb-py


from __future__ import annotations
import dataclasses
import edgedb
import uuid


class NoPydanticValidation:
    @classmethod
    def __get_pydantic_core_schema__(cls, _source_type, _handler):
        # Pydantic 2.x
        from pydantic_core.core_schema import any_schema
        return any_schema()

    @classmethod
    def __get_validators__(cls):
        # Pydantic 1.x
        from pydantic.dataclasses import dataclass as pydantic_dataclass
        _ = pydantic_dataclass(cls)
        cls.__pydantic_model__.__get_validators__ = lambda: []
        return []


@dataclasses.dataclass
class ModifyBankResult(NoPydanticValidation):
    id: uuid.UUID


async def modify_bank(
    executor: edgedb.AsyncIOExecutor,
    *,
    owner: int,
    name: str,
    money: int,
) -> ModifyBankResult:
    return await executor.query_single(
        """\
        with
          owner := (select User filter .userid = <int64>$owner)
        insert Bank {
          name := <str>$name,
          money := <int64>$money,
          owner := owner
        } unless conflict on .name else (
          update Bank set {
          money := <int64>$money,
          owner := owner
        })\
        """,
        owner=owner,
        name=name,
        money=money,
    )
