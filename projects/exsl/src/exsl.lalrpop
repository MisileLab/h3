grammar;

pub Statement: Statement = {
    Block => <>,
    VariableDeclaration => <>,
    FunctionDeclaration => <>,
};

Block: Block = {
    "{" <statements: Statement*> "}" => Block { statements }
};

VariableDeclaration: VariableDeclaration = {
    <name: Identifier> "=" <value: Value> => VariableDeclaration { name, value },
    "mut" <name: Identifier> "=" <value: Value> => MutableVariableDeclaration { name, value },
    "var" <name: Identifier> "=" <value: Value> => MutableValueVariableDeclaration { name, value }
};

FunctionDeclaration: FunctionDeclaration = {
    "func" <name: Identifier> "(" <params: FunctionParams> ")" "->" <ret_type: Type> "{" <body: Statement*> "}" => FunctionDeclaration { name, params, ret_type, body }
};

FunctionParams: Vec<FunctionParam> = {
    <params: FunctionParam*> => params,
};

FunctionParam: FunctionParam = {
    <name: Identifier> ":" <t: Type> => FunctionParam { name, type },
};

Type: Type = {
    <name: Identifier> => Type::Custom(name),
    "u8" => Type::U8,
    "u16" => Type::U16,
    "u32" => Type::U32,
    "u64" => Type::U64,
    "u128" => Type::U128,
    "i8" => Type::I8,
    "i16" => Type::I16,
    "i32" => Type::I32,
    "i64" => Type::I64,
    "i128" => Type::I128,
    "f32" => Type::F32,
    "f64" => Type::F64,
    "string" => Type::String,
};

Value: Value = {
    <val: Integer> => Value::Integer(val),
    <val: Float> => Value::Float(val),
    <val: StringLiteral> => Value::String(val),
};

Identifier: String = <id:r"[a-zA-Z_][a-zA-Z_0-9]*"> => id.to_string();

Integer: i64 = <num:r"[0-9]+"> => i64::from_str(num).unwrap();

Float: f64 = <num:r"[0-9]+\.[0-9]+"> => f64::from_str(num).unwrap();

StringLiteral: String = <str:r"\".*?\""> => str[1..str.len()-1].to_string();
