---
import {HoverType, AnimationType} from "./enum"

export interface Props {
  initialTime?: number,
  hover?: HoverType,
  completeTime?: number,
  animationType?: AnimationType,
  class?: string
}
const { initialTime = 2, hover = HoverType.reanimate, completeTime = 1, animationType = AnimationType.normal } = Astro.props;
---

<astro-animation data-initialTime={initialTime} data-hover={hover} data-completeTime={completeTime} data-animationType={animationType}><slot /></astro-animation>
<script>
  import { parseInt, nullVerify } from "@misile/satellite"

  function replaceCharacterAtIndex(string: string, index: number, replacement: string) {
    // Check if the index is within bounds
    if (index < 0 || index >= string.length) {
      throw new Error('Index out of bounds');
    }

    // Extract the substring before the index
    const before = string.slice(0, index);
    
    // Extract the substring after the index
    const after = string.slice(index + 1);

    // Return the new string with the replacement character inserted
    return before + replacement + after;
  }

  function range(start: number, end: number, step = 1) {
    // Initialize an empty array to hold the range of numbers
    const result = [];
    
    // Check if step is valid to prevent an infinite loop
    if (step === 0) {
      throw new Error("Step cannot be zero.");
    }
    
    // Generate the range of numbers based on start, end, and step
    if (step > 0) {
      for (let i = start; i < end; i += step) {
        result.push(i);
      }
    } else {
      for (let i = start; i > end; i += step) {
        result.push(i);
      }
    }
    
    return result;
  }

  function getLength(a: Record<any, any>) {
    return Object.keys(a).length;
  }

  function randomHide(
    a: HTMLElement,
    index: number,
    complete: number,
    init: number,
    animations: Record<number, {show: Record<number, number>, hide: Record<number, number>}>
  ) {
    const start = 0;
    const end = a.innerText.length;
    const ended = range(start, end);
    for (let i=start;i<end;i++) {
      animations[index].hide[i] = setTimeout(()=>{
        const _rand = Math.floor(Math.random() * ended.length);
        const rand = ended[_rand];
        ended.splice(_rand, 1)
        a.innerText=replaceCharacterAtIndex(a.innerText, rand, '_')
        delete animations[index].hide[i];
      }, init+complete*i);
    }
  }

  function normalHide(
    a: HTMLElement,
    index: number,
    rewind: boolean,
    complete: number,
    init: number,
    animations: Record<number, {show: Record<number, number>, hide: Record<number, number>}>
  ) {
    const l = a.innerText.length-1;
    for (let i=0;i<a.innerText.length;i++) {
      animations[index].hide[i] = setTimeout(()=>{
        console.debug('start');
        a.innerText=replaceCharacterAtIndex(a.innerText, rewind?l-i:i, '_')
        delete animations[index].hide[i];
      }, init+complete*i);
    }
  }

  function randomShow(
    a: HTMLElement,
    index: number,
    original: string,
    complete: number,
    init: number,
    animations: Record<number, {show: Record<number, number>, hide: Record<number, number>}>
  ) {
    const start = 0;
    const end = a.innerText.length;
    const ended = range(start, end);
    for (let i=start;i<end;i++) {
      animations[index].show[i] = setTimeout(()=>{
        console.log(`length: ${ended}`);
        const _rand = Math.floor(Math.random() * ended.length);
        const rand = ended[_rand];
        ended.splice(_rand, 1)
        a.innerText=replaceCharacterAtIndex(a.innerText, rand, original[rand])
        delete animations[index].show[i];
      }, init+complete*i);
    }
  }

  function normalShow(
    a: HTMLElement,
    index: number,
    original: string,
    rewind: boolean,
    complete: number,
    init: number,
    animations: Record<number, {show: Record<number, number>, hide: Record<number, number>}>
  ) {
    const l = a.innerText.length-1;
    for (let i=0;i<a.innerText.length;i++) {
      animations[index].show[i] = setTimeout(()=>{
        console.debug('end');
        a.innerText=replaceCharacterAtIndex(a.innerText, rewind?l-i:i, original[rewind?l-i:i]);
        delete animations[index].show[i];
      }, init+complete*i);
    }
  }

  class AstroAnimation extends HTMLElement {
    private initialTime: number = parseInt(nullVerify(this.dataset.initialtime)) * 1000;
    private hover: string = nullVerify(this.dataset.hover);
    private completeTime: number = parseInt(nullVerify(this.dataset.completetime)) * 1000;
    private animationType: string = nullVerify(this.dataset.animationtype);
    private animations: Record<number, {show: Record<number, number>, hide: Record<number, number>}> = {};

    connectedCallback() {
      for (let i=0;i<this.childNodes.length;i++) {
        const realv = this.childNodes[i] as HTMLElement;
        const org = realv.innerText;
        const aps = this.completeTime / realv.innerText.length;
        this.animations[i] = {show: [], hide: []};
        if (this.hover == "reanimate") {
          if (this.animationType == "normal" || this.animationType == 'rewind') {
            realv.addEventListener('mouseover', ()=>{
              if (getLength(this.animations[i].show) > 0 || getLength(this.animations[i].hide) > 0) {return;}
              normalHide(realv, i, this.animationType == 'rewind', aps/2, 0, this.animations);
              normalShow(realv, i, org, this.animationType == 'rewind', aps/2, aps*(realv.innerText.length/2), this.animations);
            })
            document.addEventListener('DOMContentLoaded', ()=>{
              normalHide(realv, i, this.animationType == 'rewind', aps/2, this.initialTime, this.animations);
              normalShow(realv, i, org, this.animationType == 'rewind', aps/2, this.initialTime+aps*(realv.innerText.length/2), this.animations);
            });
          } else {
            realv.addEventListener('mouseover', ()=>{
              if (getLength(this.animations[i].show) > 0 || getLength(this.animations[i].hide) > 0) {return;}
              randomHide(realv, i, aps/2, 0, this.animations);
              randomShow(realv, i, org, aps/2, aps*(realv.innerText.length/2), this.animations);
            })
            document.addEventListener('DOMContentLoaded', ()=>{
              randomHide(realv, i, aps/2, this.initialTime, this.animations);
              randomShow(realv, i, org, aps/2, this.initialTime+aps*(realv.innerText.length/2), this.animations);
            });
          }
        } else if (this.hover == "hide") {
          if (this.animationType == "normal" || this.animationType == 'rewind') {
            realv.addEventListener('mouseover', ()=>{
              if (getLength(this.animations[i].hide) > 0) {return;}
              normalHide(realv, i, this.animationType == 'rewind', aps, 0, this.animations);
            })
            realv.addEventListener('mouseout', ()=>{
              if (getLength(this.animations[i].show) > 0) {return;}
              normalShow(realv, i, org, this.animationType == 'rewind', aps, 0, this.animations);
            })
          } else {
            realv.addEventListener('mouseover', ()=>{
              if (getLength(this.animations[i].hide) > 0) {return;}
              randomHide(realv, i, aps, 0, this.animations);
            })
            realv.addEventListener('mouseout', ()=>{
              if (getLength(this.animations[i].show) > 0) {return;}
              randomShow(realv, i, org, aps, 0, this.animations);
            })
          }
        } else if (this.hover == "show") {
          if (this.animationType == "normal" || this.animationType == 'rewind') {
            realv.addEventListener('mouseover', ()=>{
              if (getLength(this.animations[i].show) > 0) {return;}
              normalShow(realv, i, org, this.animationType == 'rewind', aps, 0, this.animations);
            })
            document.addEventListener('DOMContentLoaded', ()=>{
              normalHide(realv, i, this.animationType == 'rewind', aps, this.initialTime, this.animations);
            });
            realv.addEventListener('mouseout', ()=>{
              if (getLength(this.animations[i].hide) > 0) {return;}
              normalHide(realv, i, this.animationType == 'rewind', aps, 0, this.animations);
            })
          } else {
            realv.addEventListener('mouseover', ()=>{
              if (getLength(this.animations[i].show) > 0) {return;}
              randomShow(realv, i, org, aps, 0, this.animations);
            })
            document.addEventListener('DOMContentLoaded', ()=>{
              randomHide(realv, i, aps, this.initialTime, this.animations);
            });
            realv.addEventListener('mouseout', ()=>{
              if (getLength(this.animations[i].hide) > 0) {return;}
              randomHide(realv, i, aps, 0, this.animations);
            })
          }
        }
      }
    }
  }

  customElements.define('astro-animation', AstroAnimation)
</script>

